// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartAgriculture.Infrastructure.Persistence;

#nullable disable

namespace SmartAgriculture.Infrastructure.Migrations
{
    [DbContext(typeof(SmartAgriDbContext))]
    [Migration("20250428123146_AddWeatherReadingsToFarm")]
    partial class AddWeatherReadingsToFarm
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SmartAgriculture.Domain.Entities.Farm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FarmName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FarmSize")
                        .HasColumnType("float");

                    b.Property<string>("FramLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OverAllStatus")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Farms");
                });

            modelBuilder.Entity("SmartAgriculture.Domain.Entities.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CropType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FarmId")
                        .HasColumnType("int");

                    b.Property<int>("FieldCondition")
                        .HasColumnType("int");

                    b.Property<string>("FieldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FieldSize")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("SmartAgriculture.Domain.Entities.Recommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("SmartAgriculture.Domain.Entities.SoilData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CollectedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<double>("Nitrogen")
                        .HasColumnType("float");

                    b.Property<double>("Phosphorus")
                        .HasColumnType("float");

                    b.Property<double>("Potassium")
                        .HasColumnType("float");

                    b.Property<double>("SoilMoisture")
                        .HasColumnType("float");

                    b.Property<double>("SoilOrganicMatter")
                        .HasColumnType("float");

                    b.Property<double>("SoilPH")
                        .HasColumnType("float");

                    b.Property<string>("SoilTexture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("SoilDatas");
                });

            modelBuilder.Entity("SmartAgriculture.Domain.Entities.WeatherData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CollectedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FarmId")
                        .HasColumnType("int");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<double>("Humidity")
                        .HasColumnType("float");

                    b.Property<double>("Precipition")
                        .HasColumnType("float");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.Property<double>("WindSpeed")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.HasIndex("FieldId");

                    b.ToTable("WeatherDatas");
                });

            modelBuilder.Entity("SmartAgriculture.Domain.Entities.Field", b =>
                {
                    b.HasOne("SmartAgriculture.Domain.Entities.Farm", "Farm")
                        .WithMany("Fields")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("SmartAgriculture.Domain.Entities.Recommendation", b =>
                {
                    b.HasOne("SmartAgriculture.Domain.Entities.Field", "Field")
                        .WithMany("recommendation")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("SmartAgriculture.Domain.Entities.SoilData", b =>
                {
                    b.HasOne("SmartAgriculture.Domain.Entities.Field", "Field")
                        .WithMany("soilData")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("SmartAgriculture.Domain.Entities.WeatherData", b =>
                {
                    b.HasOne("SmartAgriculture.Domain.Entities.Farm", null)
                        .WithMany("WeatherReadings")
                        .HasForeignKey("FarmId");

                    b.HasOne("SmartAgriculture.Domain.Entities.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("SmartAgriculture.Domain.Entities.Farm", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("WeatherReadings");
                });

            modelBuilder.Entity("SmartAgriculture.Domain.Entities.Field", b =>
                {
                    b.Navigation("recommendation");

                    b.Navigation("soilData");
                });
#pragma warning restore 612, 618
        }
    }
}
